// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String         @id @default(uuid())
  clerkUserId String         @unique
  email       String         @unique
  username    String         @unique
  name        String?
  imageUrl    String?
  events      Event[]        @relation("UserEvents")
  bookings    Booking[]      @relation("UserBookings")
  avaibility  Availability[]
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
}

model Event {
  id          String    @id @default(uuid())
  title       String
  description String?
  duration    Int
  userId      String
  user        User      @relation("UserEvents", fields: [userId], references: [id])
  bookings    Booking[]
  is_private  Boolean   @default(true)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model Booking {
  id              String   @id @default(uuid())
  eventId         String
  event           Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId          String
  user            User     @relation("UserBookings", fields: [userId], references: [id])
  name            String
  email           String
  additional_info String?
  start_time      DateTime @default(now())
  end_time        DateTime
  meet_link       String
  google_event_id String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model Availability {
  id         String            @id @default(uuid())
  userId     String            @unique
  user       User              @relation(fields: [userId], references: [id])
  timeGap    Int
  days       DayAvailability[] @relation("UserDayAvailability")
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt
}

model DayAvailability {
  id             String       @id @default(uuid())
  availabilityId String
  availability   Availability @relation("UserDayAvailability", fields: [availabilityId], references: [id], onDelete: Cascade)
  day            DayOfWeek
  start_time     DateTime
  end_time       DateTime
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESSDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

// proxy: put your baseUrl in proxy and the you communicate with proxy in your app
